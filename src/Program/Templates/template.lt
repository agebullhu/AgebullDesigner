@*#
	'Name':'生成REDIS序列化代码',
	'Descript':'REDIS序列化代码',
	'ModelType':'EntityConfig',
	'Language':'C++',
	'Path':'{ModelPath}/{ConfigName}_redis.h'
*@

@{
	if (not model.PrimaryColumn)
	then
		do
			return;
		end
	end
	name = model.Name
	point = model.Abbreviation
	eName = model.Name
	eCaption = model.Caption
	pName=model.PrimaryColumn.Name;
	pCaption=model.PrimaryColumn.Caption;
}
/**
* @@brief 生成一个新的@pCaption
* @@return 新的@pCaption
*/
inline int generate_@(name)_id()
{
    return static_cast<int>(incr_redis("i:@point"));
}
/**
* @@brief @(eName)保存到redis
* @@param {@eName} field @eCaption
* @@return ID
*/
inline int save_to_redis(const @eName* field)
{
    size_t len = 0;
    char* buffer = Serialize(field, len);
    int id = static_cast<int>(incr_redis("i:@point"));
    write_to_redis(buffer, len, "e:@point:%d", id);
    return id;
}

/**
* @@brief 从redis读取@eName
* @@param {int} id @pCaption
* @@return @eName
*/
inline shared_ptr<@eName> load_@(name)(int id)
{
    acl::string vl = read_from_redis("e:@point:%d", id);
    char* buf = static_cast<char*>(vl.buf());
    size_t len = static_cast<char*>(vl.buf_end()) - buf;
    if (len <= 0)
        return nullptr;
    @eName* field = new @eName();
    Deserialize(buf, len, field);
    return shared_ptr<@eName>(field);
}

/**
* @@brief @eName 保存到redis
* @@param {@eName} field @eCaption
* @@return ID
*/
inline int save_to_redis(const @eName* field)
{
    size_t len = 0;
    char* buffer = Serialize(field, len);
    int id = field->@pName == 0 ? generate_@(name)_id() : field->@pName;
    write_to_redis(buffer, len, "e:@point:%d", id);
    return id;
}

/**
* @@brief 从redis读取@eName
* @@param {int} id @pCaption
* @@param {int} uid 用户ID
* @@return @eName
*/
inline shared_ptr<@eName> load_@name(int id, int uid)
{
    acl::string vl = read_from_redis("e:@point:%d:%d", uid, id);
    char* buf = static_cast<char*>(vl.buf());
    size_t len = static_cast<char*>(vl.buf_end()) - buf;
    if (len <= 0)
        return nullptr;
    @eName* field = new @eName();
    Deserialize(buf, len, field);
    return shared_ptr<@eName>(field);
}

/**
* @@brief @eName 保存到redis
* @@param {@eName} field @eCaption
* @@return ID
*/
inline int save_to_redis(@eName* field)
{
    size_t len = 0;
    char* buffer = Serialize(field, len);
    if(field->@pName <= 0)
        field->@pName = generate_@(name)_id();
    write_to_redis(buffer, len, "e:@point:%d:%d", field->@pName, field->@pName);
    return field->@pName;
}